{"version":3,"file":"static/js/736.f82e6ba2.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,8BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,qCAAwCC,IADhC,cACzBE,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBC,EAAkB,mCAAG,WAAOC,GAAP,uFACPN,EAAAA,EAAAA,IAAA,iCAAoCC,EAApC,iCAAoEK,EAApE,gCADO,cACxBH,EADwB,yBAEvBA,EAASC,MAFc,2CAAH,sDAKlBG,EAAY,mCAAG,WAAOC,GAAP,uFACDR,EAAAA,EAAAA,IAAA,kBAAqBQ,EAArB,oBAAmCP,EAAnC,oBADC,cAClBE,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZK,EAAe,mCAAG,WAAOD,GAAP,uFACJR,EAAAA,EAAAA,IAAA,kBAAqBQ,EAArB,4BAA2CP,EAA3C,oBADI,cACrBE,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,sDAKfM,EAAe,mCAAG,WAAOF,GAAP,uFACJR,EAAAA,EAAAA,IAAA,kBAAqBQ,EAArB,4BAA2CP,EAA3C,2BADI,cACrBE,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,qD,sKCvBfO,EAASC,EAAAA,GAAAA,GAAH,qJASNC,EAAYD,EAAAA,GAAAA,GAAH,0CAITE,EAAYF,EAAAA,GAAAA,IAAH,yC,uCCkCtB,EAvCa,WACT,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAQC,EAAR,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,oGAEQD,GAAa,GAFrB,UAG6BZ,EAAAA,EAAAA,IAAgBM,GAH7C,OAGcQ,EAHd,OAIQJ,EAAUI,GACVF,GAAa,GALrB,gDAOQG,EAAAA,GAAAA,MAAY,gCAPpB,0DADY,uBAAC,WAAD,wBAWZC,EACH,GAAE,CAACV,IAEJ,IAAQW,EAASR,EAATQ,KACR,OACA,+BACOA,GAAQA,EAAKC,OAAS,GACpB,SAAChB,EAAD,UACDe,EAAKE,KAAI,YAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,aAActB,EAAS,EAATA,GAC3B,OAAQ,UAACK,EAAD,YACA,SAACC,EAAD,CAAWiB,IAAKD,EAAY,UA5B/B,mCA4B+B,OAAqBA,GAAiB,+EAAgFE,IAAI,gBACtJ,uBAAIH,MAFYrB,EAKf,OAEG,gFAEFY,IAAa,SAACa,EAAA,EAAD,KACd,SAAC,KAAD,MAExB,C,sEC7CYC,E,QAAetB,GAAAA,KAAH,quB,SCAZqB,EAAS,WAClB,OAAO,SAACC,EAAD,GACV,C","sources":["Api.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\nconst API_KEY = 'a24504acc04e1862bdc8e18566b301b1';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`3/trending/all/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMoviesByKeyword = async (query) => {\n    const response = await axios.get(`3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\n    return response.data;\n};\n\nexport const getMovieById = async (id) => {\n    const response = await axios.get(`3/movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const getMovieCredits = async (id) => {\n    const response = await axios.get(`3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const getMovieReviews = async (id) => {\n    const response = await axios.get(`3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;    \n}","import styled from \"styled-components\";\n\nexport const Actors = styled.ul`\n   display: flex;\n   align-items: center;\n   justify-content: center;\n   flex-wrap: wrap;\n   gap: 20px;\n   padding: 0;\n`;\n\nexport const ActorCard = styled.li`\n   width: 150px;\n`;\n\nexport const ActorFoto = styled.img`\n   width: 100%;\n`;","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { getMovieCredits} from \"Api\";\nimport { Actors, ActorFoto, ActorCard } from \"./Cast.styled\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [ actors, setActors ] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    \n    useEffect(() => {\n        async function getMovie() {\n            try {\n                setIsLoading(true);\n                const result = await getMovieCredits(movieId);\n                setActors(result);\n                setIsLoading(false);\n            } catch {\n                toast.error('Ooops! Something went wrong!')\n            }\n        }\n        getMovie();\n    }, [movieId]);\n\n    const { cast } = actors;\n    return (\n    <section> \n          {cast && cast.length > 0 ? (\n             <Actors>\n           {cast.map(({name, profile_path, id }) => {\n                return (<ActorCard key={id}>\n                        <ActorFoto src={profile_path ? `${BASE_IMG_URL}${profile_path}` : 'https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg'} alt=\"Actor foto\" />\n                        <p>{name}</p>\n                        </ActorCard>\n                        );\n                        })}\n                        </Actors>)\n                         : (<div>Sorry, we don't have any information about actors!</div>\n                         )}  \n                         {isLoading && <Loader />}\n                         <ToastContainer />\n    </section> );\n};\n\nexport default Cast;","import styled from \"styled-components\";\n\nexport const StyledLoader = styled.span`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 64px;\n    height: 64px;\n    background-color: transparent;\n    transform: rotate(45deg);\n    overflow: hidden;\n    margin: 0 auto;\n\n  &:after{\n    content: '';\n    position: absolute;\n    inset: 8px;\n    margin: auto;\n    background: #222b32;\n  }\n  &:before{\n    content: '';\n    position: absolute;\n    inset: -15px;\n    margin: auto;\n    background: #de3500;\n    animation: diamondLoader 2s linear infinite;\n  }\n  @keyframes diamondLoader {\n    0%  ,10% {\n      transform: translate(-64px , -64px) rotate(-45deg)\n    }\n    90% , 100% {\n      transform: translate(0px , 0px) rotate(-45deg)\n    }\n  }\n`;","import { StyledLoader } from './Loader.styled'\n\nexport const Loader = () => {\n    return <StyledLoader></StyledLoader>\n}"],"names":["axios","API_KEY","getTrendingMovies","response","data","getMoviesByKeyword","query","getMovieById","id","getMovieCredits","getMovieReviews","Actors","styled","ActorCard","ActorFoto","movieId","useParams","useState","actors","setActors","isLoading","setIsLoading","useEffect","result","toast","getMovie","cast","length","map","name","profile_path","src","alt","Loader","StyledLoader"],"sourceRoot":""}